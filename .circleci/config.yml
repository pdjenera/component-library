# This config was automatically generated from your source code
# Stacks detected: deps:node:.,package_manager:yarn:,test:jest:
version: 2.1
orbs:
  node: circleci/node@5
jobs:
  linting:
    # Install node dependencies and run linter
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - run:
          name: Lint
          command: yarn run lint
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - yarn.json
            - package.json
            - src
            - .eslintrc.js
            - .prettierrc.js
            - .gitignore
            - .npmignore
            - .nvmrc
            - .circleci
            - rollup.config.mjs
            - commitlint.config.js
            - tsconfig.json
            - .husky
  testing:
    # Install node dependencies and run tests
    executor: node/default
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - run:
          command: yarn add jest-junit --ignore-workspace-root-check
      - run:
          name: Run tests
          command: yarn run test --ci --runInBand --reporters=default --reporters=jest-junit
      - store_test_results:
          path: ./test-results/
  building:
    # Build node project
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - run:
          command: yarn run build
      - run:
          name: Create the ~/artifacts directory if it doesn't exist
          command: mkdir -p ~/artifacts
      - run:
          name: Copy artifacts
          command: cp -R build dist public .output .next .docusaurus ~/artifacts 2>/dev/null || true
      - store_artifacts:
          path: ~/artifacts
          destination: node-build
  publish-github-release:
    docker:
      - image: circleci/golang:1.8
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            go get github.com/tcnksm/ghr
            VERSION=$(my-binary --version)
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./artifacts/
  publish_to_npm:
    executor: node/default
    description: Publish to npm
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - run:
          name: Login to npm
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run:
          name: Set up git credentials
          command: |
            git config --global user.email $GIT_EMAIL 
            git config --global user.name $GIT_NAME
      - run:
          name: Run release
          command: yarn release
      - run:
          name: Publish to npm
          command: |
            CURRENT_VERSION=$(npm show pdjenera-component-library version)
            LOCAL_VERSION=$(node -pe "require('./package.json').version")

            if [ "$CURRENT_VERSION" != "$LOCAL_VERSION" ]; then
              echo "Versions are different. Publishing to npm."
              echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
              yarn publish
            else
              echo "Versions are the same. Skipping npm publish."
            fi
          enironment:
            NPM_TOKEN: $NPM_TOKEN
workflows:
  build-and-test:
    jobs:
      - linting
      - testing:
          requires:
            - linting
      - building:
          requires:
            - testing
      - publish-github-release:
          requires:
            - building
      - publish_to_npm:
          requires:
            - building
            







            