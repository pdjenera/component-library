name: Release

on:
  workflow_dispatch:


permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup git user 
        uses: fregante/setup-git-user@v1

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '23'

      - name: Install dependencies
        run: yarn install

      - name: Test
        run: yarn test

      - name: Check the version
          id: check
          run: |
            CURRENT_VERSION=$(jq -r .version package.json)
            echo "Current version: $CURRENT_VERSION"
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "Latest tag: $LATEST_TAG"

            LATEST_VERSION=${LATEST_TAG#v}

            if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; 
            then
              echo "Version changed"
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            else
              echo "Version not changed"
              echo "version_changed=false" >> $GITHUB_OUTPUT
            fi

      - name: Build
        run: yarn build
        if: steps.check.outputs.version_changed == 'true'
      
      - name: Publish to npm
        run: |
            CURRENT_VERSION=$(npm show pdjenera-component-library version)
            LOCAL_VERSION=$(node -pe "require('./package.json').version")

            if [ "$CURRENT_VERSION" != "$LOCAL_VERSION" ]; then
              echo "Versions are different. Publishing to npm."
              echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
              yarn publish
            else
              echo "Versions are the same. Skipping npm publish."
            fi 
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Tag release
          if: steps.check.outputs.version_changed == 'true'
          run: |
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git tag -a "v${{ steps.check.outputs.new_version }}" -m "v${{ steps.check.outputs.new_version }}"
            git push origin "v${{ steps.check.outputs.new_version }}"    
